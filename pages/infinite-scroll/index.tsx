import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import { QueryClient } from "@tanstack/react-query";
import Characters from "../../components/Characters";
import { NavBar } from "../../components/Navbar";
import styles from "../styles/Home.module.css";
import { useInView } from "react-intersection-observer";

import React from "react";
import Character, { CharacterProps } from "../../components/Character";

export default function Home() {
  const [page, setPage] = useState(1);
  const [characterData, setCharacterData] = useState([]);
  const { ref, inView } = useInView();

  const queryClient = new QueryClient();

  const fetchCharacters = async (page: number) => {
    const response = await fetch(
      `https://rickandmortyapi.com/api/character?page=${page}`
    );
    return response.json();
  };

  const {
    status,
    data,
    error,
    isFetching,
    isFetchingNextPage,
    isFetchingPreviousPage,
    fetchNextPage,
    fetchPreviousPage,
    hasNextPage,
    hasPreviousPage,
  } = useInfiniteQuery(
    ["projects"],
    async ({ pageParam = 1 }) => {
      const response = await fetch(
        `https://rickandmortyapi.com/api/character?page=${pageParam}`
      );
      return response.json();
    },
    {
      getPreviousPageParam: (firstPage) => {
        firstPage.previousId ?? undefined;
      },
      getNextPageParam: (lastPage) => {
        console.log("lastPage");
        console.log(lastPage);

        const nextPage = !!lastPage.info.next
          ? lastPage.info.next.split("page=")[1]
          : undefined;

        return nextPage;
      },
    }
  );

  console.log("data");
  console.log(data);

  console.log("hasNextPage");
  console.log(hasNextPage);

  React.useEffect(() => {
    if (inView) {
      console.log("Next");
      fetchNextPage();
    }
  }, [inView]);

  if (status === "loading") {
    return <div> Loading...</div>;
  }

  if (status === "error") {
    return <div> Error</div>;
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <NavBar />

        <div className="container">
          <h1>Rick and Morty</h1>
          <div className="characters">
            {data.pages.map((page: any) =>
              page.results.map(
                (character: CharacterProps["character"], index: number) => (
                  <Character key={`character-${index}`} character={character} />
                )
              )
            )}
          </div>
          <div ref={ref} style={{
            display: "flex",
            padding: "20px",
            textAlign: "center",
            justifyContent: "center"
          }}>
            <h3>
              {isFetchingNextPage
                ? "Loading more..."
                : hasNextPage
                ? "Load Newer"
                : "Nothing more to load"}
            </h3>
          </div>
        </div>
      </main>
    </>
  );
}
