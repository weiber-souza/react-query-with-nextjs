import {
  dehydrate,
  useQuery,
  QueryClient,
  useQueries,
} from "@tanstack/react-query";
import { GetServerSideProps, GetServerSidePropsContext } from "next";
import Head from "next/head";
import Image from "next/image";
import { Router, useRouter } from "next/router";
import { useState } from "react";
import Characters from "../../components/Characters";
import { NavBar } from "../../components/Navbar";
// import { fetchCharacters } from "../api/fetchCaracters";
import styles from "../styles/Home.module.css";

export const fetchCharacters = async (id: string) => {
  const response = await fetch(
    `https://rickandmortyapi.com/api/character?page=${id}`
  );
  return response.json();
};

export async function getServerSideProps({
  req,
  res,
  query,
}: GetServerSidePropsContext) {
  const { id } = query;

  const queryClient = new QueryClient();

  await queryClient.fetchQuery(["character", id], () =>
    fetchCharacters(id as string)
  );

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    }, // will be passed to the page component as props
  };
}

export default function Home() {
  const router = useRouter();

  const {
    query: { id },
  } = useRouter();

  const { data, isFetched, isLoading, isError } = useQuery(
    ["character", id],
    () => fetchCharacters(id as string),
    {
      staleTime: Infinity,
    }
  );

  if (isLoading) return <div>Loading</div>;

  if (isError) return <div>Loading</div>;


  const pageNumber = parseInt(id as string);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <NavBar />

        <div className="container">
          <h1>Rick and Morty</h1>
           <Characters characteres={data} />

          <button
            onClick={() => {
              const page = parseInt(id as string) - 1;
              router.push(`/pagination-server-side/${page}`);
            }}
            disabled={pageNumber === 1}
          >
            Previous
          </button>
          <button
            onClick={() => {
              const page = parseInt(id as string) + 1;
              router.push(`/pagination-server-side/${page}`);
            }}
            disabled={!data.info.next}
          >
            Next
          </button>
        </div>
      </main>
    </>
  );
}
